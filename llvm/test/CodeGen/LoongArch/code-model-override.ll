; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 --code-model=small < %s | FileCheck %s --check-prefix=LA64SMALLMEDIUM
; RUN: llc --mtriple=loongarch64 --code-model=medium < %s | FileCheck %s --check-prefix=LA64SMALLMEDIUM
; RUN: llc --mtriple=loongarch64 --code-model=large < %s | FileCheck %s --check-prefix=LA64LARGE

@default = global i32 zeroinitializer, align 4
@force_small = addrspace(1024) global i32 zeroinitializer, align 4
@force_medium = addrspace(1025) global i32 zeroinitializer, align 4
@force_large = addrspace(1026) global i32 zeroinitializer, align 4

;; The only difference between the "small" and "medium" code models is how
;; procedure calls are lowered (single bl/jirl vs. pcalau12i + jirl with an
;; immediate), so in this case the generated code stays the same.
define i32 @foo() nounwind {
; LA64SMALLMEDIUM-LABEL: foo:
; LA64SMALLMEDIUM:       # %bb.0:
; LA64SMALLMEDIUM-NEXT:    pcalau12i $a0, %got_pc_hi20(force_small)
; LA64SMALLMEDIUM-NEXT:    ld.d $a0, $a0, %got_pc_lo12(force_small)
; LA64SMALLMEDIUM-NEXT:    ld.w $a0, $a0, 0
; LA64SMALLMEDIUM-NEXT:    pcalau12i $a1, %got_pc_hi20(default)
; LA64SMALLMEDIUM-NEXT:    ld.d $a1, $a1, %got_pc_lo12(default)
; LA64SMALLMEDIUM-NEXT:    ld.w $a1, $a1, 0
; LA64SMALLMEDIUM-NEXT:    add.d $a0, $a1, $a0
; LA64SMALLMEDIUM-NEXT:    pcalau12i $a1, %got_pc_hi20(force_medium)
; LA64SMALLMEDIUM-NEXT:    ld.d $a1, $a1, %got_pc_lo12(force_medium)
; LA64SMALLMEDIUM-NEXT:    ld.w $a1, $a1, 0
; LA64SMALLMEDIUM-NEXT:    pcalau12i $a2, %got_pc_hi20(force_large)
; LA64SMALLMEDIUM-NEXT:    addi.d $a3, $zero, %got_pc_lo12(force_large)
; LA64SMALLMEDIUM-NEXT:    lu32i.d $a3, %got64_pc_lo20(force_large)
; LA64SMALLMEDIUM-NEXT:    lu52i.d $a3, $a3, %got64_pc_hi12(force_large)
; LA64SMALLMEDIUM-NEXT:    ldx.d $a2, $a3, $a2
; LA64SMALLMEDIUM-NEXT:    ld.w $a2, $a2, 0
; LA64SMALLMEDIUM-NEXT:    add.d $a1, $a1, $a2
; LA64SMALLMEDIUM-NEXT:    add.d $a0, $a0, $a1
; LA64SMALLMEDIUM-NEXT:    ret
;
; LA64LARGE-LABEL: foo:
; LA64LARGE:       # %bb.0:
; LA64LARGE-NEXT:    pcalau12i $a0, %got_pc_hi20(force_medium)
; LA64LARGE-NEXT:    ld.d $a0, $a0, %got_pc_lo12(force_medium)
; LA64LARGE-NEXT:    ld.w $a0, $a0, 0
; LA64LARGE-NEXT:    pcalau12i $a1, %got_pc_hi20(force_large)
; LA64LARGE-NEXT:    addi.d $a2, $zero, %got_pc_lo12(force_large)
; LA64LARGE-NEXT:    lu32i.d $a2, %got64_pc_lo20(force_large)
; LA64LARGE-NEXT:    lu52i.d $a2, $a2, %got64_pc_hi12(force_large)
; LA64LARGE-NEXT:    ldx.d $a1, $a2, $a1
; LA64LARGE-NEXT:    ld.w $a1, $a1, 0
; LA64LARGE-NEXT:    add.d $a0, $a0, $a1
; LA64LARGE-NEXT:    pcalau12i $a1, %got_pc_hi20(force_small)
; LA64LARGE-NEXT:    ld.d $a1, $a1, %got_pc_lo12(force_small)
; LA64LARGE-NEXT:    ld.w $a1, $a1, 0
; LA64LARGE-NEXT:    pcalau12i $a2, %got_pc_hi20(default)
; LA64LARGE-NEXT:    addi.d $a3, $zero, %got_pc_lo12(default)
; LA64LARGE-NEXT:    lu32i.d $a3, %got64_pc_lo20(default)
; LA64LARGE-NEXT:    lu52i.d $a3, $a3, %got64_pc_hi12(default)
; LA64LARGE-NEXT:    ldx.d $a2, $a3, $a2
; LA64LARGE-NEXT:    ld.w $a2, $a2, 0
; LA64LARGE-NEXT:    add.d $a1, $a2, $a1
; LA64LARGE-NEXT:    add.d $a0, $a1, $a0
; LA64LARGE-NEXT:    ret
  %1 = load i32, ptr @default
  %2 = load i32, ptr addrspace(1024) @force_small
  %3 = load i32, ptr addrspace(1025) @force_medium
  %4 = load i32, ptr addrspace(1026) @force_large
  %5 = add i32 %1, %2
  %6 = add i32 %3, %4
  %7 = add i32 %5, %6
  ret i32 %7
}
